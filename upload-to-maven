#!/usr/bin/env ruby

if File.basename($PROGRAM_NAME) != 'rake'
  require 'shellwords'
  puts "bundle exec rake -f #{Shellwords.escape($PROGRAM_NAME)} #{Shellwords.shelljoin(ARGV)}"
  exec "bundle exec rake -f #{Shellwords.escape($PROGRAM_NAME)} #{Shellwords.shelljoin(ARGV)}"
end

$stdout.sync = true
$stderr.sync = true

require 'rubygems'
require 'timeout'
require 'json'

def artifact_suffix
  ENV['ARTIFACT_SUFFIX'] || '-experimental'
end

def experimental?
  artifact_suffix =~ /experimental/
end

def version_info
  JSON.parse(File.read('target/version.json'))
end

def go_version
  version_info['go_version']
end

def go_full_version
  version_info['go_full_version']
end

def maven_release_version
  experimental? ? go_full_version : go_version
end

task :clean do
  rm_rf 'target'
end

task :init do
  mkdir_p 'target'
end

task :fetch do
  job_identifier = ENV['INSTALLER_JOB_IDENTIFIER'] || (fail 'INSTALLER_JOB_IDENTIFIER not set. Example: build-linux/645/go-sdk/2/go-plugin-api')
  url = "https://build.gocd.org/go/files/#{job_identifier}"
  username = ENV['ARTIFACT_FETCH_USERNAME'] || 'view'
  password = ENV['ARTIFACT_FETCH_PASSWORD'] || 'password'

  cd 'target' do
    Timeout.timeout(60) do
      loop do
        sh("curl --silent --fail --user #{username}:#{password} -D curl-headers.txt #{url}/go-plugin-api.zip -o go-plugin-api.zip")
        if File.read('curl-headers.txt') =~ /HTTP\/1\.1 200 OK/
          rm_f 'curl-headers.txt'
          break
        end
        sleep 1
      end
      loop do
        sh("curl --silent --fail --user #{username}:#{password} -D curl-headers.txt #{url}/go-plugin-config-repo.zip -o go-plugin-config-repo.zip")
        if File.read('curl-headers.txt') =~ /HTTP\/1\.1 200 OK/
          rm_f 'curl-headers.txt'
          break
        end
        sleep 1
      end
    end

    sh('unzip go-plugin-api.zip')
    sh('unzip go-plugin-config-repo.zip')
    sh("curl --silent --fail --user #{username}:#{password} https://build.gocd.org/go/files/#{job_identifier}/dist/meta/version.json -o version.json")
  end
end

task :prepare_for_upload do
  {
    "target/go-plugin-api/go-plugin-api-#{go_full_version}.jar"                         => "target/go-plugin-api/go-plugin-api#{artifact_suffix}-#{maven_release_version}.jar",
    "target/go-plugin-api/go-plugin-api-#{go_full_version}-javadoc.jar"                 => "target/go-plugin-api/go-plugin-api#{artifact_suffix}-#{maven_release_version}-javadoc.jar",
    "target/go-plugin-api/go-plugin-api-#{go_full_version}-sources.jar"                 => "target/go-plugin-api/go-plugin-api#{artifact_suffix}-#{maven_release_version}-sources.jar",
    "target/go-plugin-config-repo/go-plugin-config-repo-#{go_full_version}.jar"         => "target/go-plugin-config-repo/go-plugin-config-repo#{artifact_suffix}-#{maven_release_version}.jar",
    "target/go-plugin-config-repo/go-plugin-config-repo-#{go_full_version}-javadoc.jar" => "target/go-plugin-config-repo/go-plugin-config-repo#{artifact_suffix}-#{maven_release_version}-javadoc.jar",
    "target/go-plugin-config-repo/go-plugin-config-repo-#{go_full_version}-sources.jar" => "target/go-plugin-config-repo/go-plugin-config-repo#{artifact_suffix}-#{maven_release_version}-sources.jar"
  }.each do |original_name, new_name|
    if original_name != new_name
      cp original_name, new_name
    end
  end
end

task :upload do
  pom_content = File.read('deploy-pom.xml').gsub('${goReleaseVersion}', maven_release_version).gsub('${artifactSuffix}', artifact_suffix)

  [ 'go-plugin-api', 'go-plugin-config-repo' ].each do |artifact_name|
    File.open("target/#{artifact_name}/pom.xml", 'w') { |f| f.puts pom_content }

    cd "target/#{artifact_name}" do
      sh("mvn -DautoReleaseToCentral=#{ENV['AUTO_RELEASE_TO_CENTRAL'] || 'false'} --batch-mode deploy")
    end

  end
end

task default: [:clean, :init, :fetch, :prepare_for_upload, :upload]
